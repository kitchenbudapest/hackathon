## INFO ##
## INFO ##

# Indicate the beginning of building
print '{:#^80}'.format(' SCONS BUILD ')

# Import python modules
from os.path import join

# Essential variables
input_dir  = 'src'
output_dir = 'build'
target     = 'main'
source     = ['main.c']

# C compiler
CC = 'clang'

# C compiler flags
CCFLAGS = ['v',
           'g',
           'O3',
           'Wall',
           'Wextra',
           'pedantic',
           'std=c99',]

# GCC specific c compiler flags
GCCFLAGS = ['fdiagnostics-color=always']
# CLANG specific  compiler flags
CLANGFLAGS = ['fcolor-diagnostics',
              'fmacro-backtrace-limit=0']


# C pre-processor path (include)
CPPPATH = ['.',
           '/usr/include/',
           '/usr/local/include']

# Library path
LIBPATH = ['.',
           '/usr/lib',
           '/usr/local/lib']

# Libraries
LIBS = ['wiringPi']

# Add compiler specific flags to generic flags
CCFLAGS.extend(GCCFLAGS if CC == 'gcc' else CLANGFLAGS if CC == 'clang' else [])

# Helper functions
def flag_prefixer(flags):
    return ['-' + flag for flag in flags]

def path_prefixer(files):
    return [join(output_dir, file) for file in files]


# Builds
def test_build():
    # Create environment
    environment = Environment(CC      = CC,
                              CCFLAGS = flag_prefixer(CCFLAGS),
                              CPPPATH = CPPPATH,
                              LIBPATH = LIBPATH,
                              LIBS    = LIBS)

    # Specify output directory
    environment.VariantDir(variant_dir = output_dir,
                           src_dir     = input_dir)

    # Create program
    environment.Program(target = target,
                        source = path_prefixer(source))


# Create builds
test_build()
